// SPDX-License-Identifier: Apache-2.0

pragma cloak ^0.2.0;

contract father {
    mapping(uint256 => uint256) fm0; //0x0
    mapping(uint256 => uint256) fm1; //0x1
    uint256[] farr1; //0x2
    uint64 fi1; //0x3
    uint64 fi2; //0x3
    bool fb4; //0x3
    int16 fi3; // 0x3
    int16 fi4; // 0x3
    uint256 fi5; //0x4
    uint256 private fi6; //0x5
    uint16 fi7;//0x6
    final address@all _manager; // all
    mapping(address => uint256) pubBalances; // public
    mapping(address!x => uint256@x) priBalances; // private

    constructor(address manager)  public {
        _manager = manager;
        pubBalances[manager] = 1000;
    }

    function deposit(uint256 value) public returns (bool) {
        require(value <= pubBalances[me], "require value smaller than balance");
        pubBalances[me] = pubBalances[me] - value;
        priBalances[me] = priBalances[me] + value;
        return true;
    }

    function multiPartyTransfer(address to, uint256 value)
        public
        returns (bool) {
        require(value <= priBalances[me], "require value smaller than balance");
        require(to != address(0), "require to not equal to address 0");

        priBalances[me] = priBalances[me] - value;
        priBalances[to] = priBalances[to] + value;
        return true;
    }

    function getFi1() public view returns(uint64) {
        return fi1;
    }

    function fatherfunc(uint256 a) public {
        fi5 = a;
    }

    function getFi5() public view returns(uint256) {
        return fi5;
    }
    
}

contract son is father {
    uint16 si7;
    mapping(uint256 => uint256) sm0;
    mapping(uint256 => uint256) sm1;
    uint256[] sarr1; 
    uint64 si2;

    constructor(address manager) father(manager) public {}

    function updatefather(uint256 tmp) public {
        fi5 = tmp;
        sm1[tmp] = tmp;
    }

    function callfather(uint256 a) public {
        fatherfunc(a);
    }

}
